version: 2

resource_job_defaults: &resource_job_defaults
  docker:  [{image: 'circleci/ruby:2.4.1'}]
  steps:
    - run:
        name: verify that job ran with the requested resource_class option
        command: |
          echo "$CIRCLE_JOB"

remote_docker_defaults: &remote_docker_defaults
  docker: [{image: 'docker:17.06-git'}]

basic_docker_build: &basic_docker_build
  name: "Build a really basic docker image"
  command: |
    dockerfile=Dockerfile
    echo "FROM alpine:latest" > $dockerfile
    echo "RUN echo hello" >> $dockerfile
    docker build -f $dockerfile --tag throwaway:$CIRCLE_BUILD_NUM .
    docker run --rm throwaway:$CIRCLE_BUILD_NUM

contexts_defaults: &contexts_defaults
  docker: [{image: 'alpine:latest'}]
  working_directory: /a/contexts/test

workspaces_defaults: &workspaces_defaults
  docker: [{image: 'circleci/node:latest'}]
  working_directory: ~/foo/bar

jobs:
  # resource class jobs
  small: # 1 vCPU, 2GB RAM
    <<: *resource_job_defaults
    resource_class: small

  medium: # 2 vCPUs, 4GB RAM
    <<: *resource_job_defaults
    resource_class: medium

  medium+: # 3 vCPUs, 6GB RAM
    <<: *resource_job_defaults
    resource_class: medium+

  large: # 4 vCPUs, 8GB RAM
    <<: *resource_job_defaults
    resource_class: large

  xlarge: # 8 vCPUs, 16GB RAM
    <<: *resource_job_defaults
    resource_class: xlarge

  # vm jobs
  machine:
    machine: true
    steps:
      - run: |
          echo $SLEEP
          date
          sleep $SLEEP
          date
          echo 'Done sleeping.'
    environment:
      SLEEP: 1

  remote_docker:
    <<: *remote_docker_defaults
    steps:
      - run: which docker
      - run: docker -v
      - setup_remote_docker
      - run:
          <<: *basic_docker_build
      - run: docker version

  docker_layer_caching:
    <<: *remote_docker_defaults
    steps:
      - run: which docker
      - run: docker -v
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          <<: *basic_docker_build
      - run: docker version

  machine_dlc:
    machine:
      docker_layer_caching: true
    steps:
      - run: which docker
      - run: docker -v
      - run:
          <<: *basic_docker_build
      - run: docker version

  # feature jobs
  contexts:
    <<: *contexts_defaults
    steps:
      - run: env | grep CONTEXT_END_TO_END_TEST_VAR

  multi-contexts:
    <<: *contexts_defaults
    steps:
      - run: env | grep MULTI_CONTEXT_END_TO_END_VAR

  write_workspace:
    <<: *workspaces_defaults
    steps:
      - run: mkdir stuff
      - run: echo 5 >./stuff/thing
      - persist_to_workspace:
          root: .
          paths:
            - stuff

  read_workspace:
    <<: *workspaces_defaults
    steps:
      - attach_workspace:
           at: ./attached
      - run: |
          if [[ $(< ./attached/stuff/thing) != '5' ]]; then
            echo 'Sadness, the value is not what we expected, so the workspace write/read did not work'
            exit 1
          else
            echo 'Yay, value matches'
            exit 0
          fi

  save_and_restore_cache:
    docker:
      - image: circleci/python
    working_directory: ~/realitycheck
    steps:
      - checkout

      - run: mkdir -p stuff
      - run: echo 5 >./stuff/thing

      - save_cache:
          key: v3-file-cache-{{ .BuildNum }}
          paths:
            - ./stuff/thing

      - run: rm -rf ./stuff/thing
      - run: sleep 5

      - restore_cache:
            keys:
              - v3-file-cache-{{ .BuildNum }}

      - run: |
            if [[ $(< stuff/thing) != '5' ]]; then
              exit 1
            else
              echo "The cache was populated"
            fi

  artifacts_test_results:
    docker:
      - image: python:3.6.0
    working_directory: ~/realitycheck
    steps:
      - checkout

      - run:
          name: Creating Dummy Artifacts
          command: |
            echo "my artifact file" > /tmp/artifact-1.txt;
            mkdir /tmp/artifacts;
            echo "my artifact files in a dir" > /tmp/artifacts/artifact-2.txt;

      - store_artifacts:
          path: /tmp/artifact-1.txt
          destination: artifact-file.txt

      - store_artifacts:
          path: /tmp/artifacts

      - store_test_results:
          path: test-results

  # TW jobs
  docker_tw_ee_liveness:
    docker:
      - image: docker.tw.ee/k8s-deployer:1
    steps:
      - checkout
      - run:
          name: Can we run commands
          command: |
            echo "Hello world! I can run commands"
            
  long_nothing:
    docker:
      - image: docker.tw.ee/k8s-deployer:1
    steps:
      - checkout
      - run:
          name: Execute script
          command: |
            chmod +x .circleci/long.sh
            .circleci/long.sh

  java:
    resource_class: medium+
    docker:
      - image: arti.tw.ee/circle_openjdk13
        user: circleci
        environment:
          TERM: vt100
          GRADLE_OPTS: "-Xmx1024m -Dorg.gradle.jvmargs='-Xmx6g'"
          _JAVA_OPTIONS: '-Dspring.profiles.include=circleci -Xmx1500m'
      - image: mariadb:10.2.25
        name: maria
        command: ['--character-set-server=utf8', '--collation-server=utf8_unicode_ci']
        environment:
          MYSQL_ROOT_PASSWORD: admin
          MYSQL_DATABASE: circle-realitycheck
          MYSQL_USER: test
          MYSQL_PASSWORD: test
      - image: postgres:9.6
        name: postgres
        environment:
          POSTGRES_DB: circle-realitycheck
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
      - image: zookeeper:3.5.5
        name: zk-service
        environment:
          ZOO_MY_ID: 1
      - image: wurstmeister/kafka:latest
        name: kafka
        environment:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zk-service:2181
          KAFKA_LISTENERS: PLAINTEXT://:9092
    steps:
      - checkout
      - restore_cache:
          # here we restore the .gradle folder, so we don't have to download all the jars again.
          # the cache key is the checksum of build.gradle, so a new version of the cache will
          # be produced if you changed something in the build script (likely you changed a dependency)
          keys:
            - circle-realitycheck-gradle-cache-{{ checksum "./build.gradle" }}
      - run:
          name: Assemble Jar
          command: ./gradlew clean assemble testClasses --console=plain
      - run:
          name: Run Tests
          command: ./gradlew check -Dspring.profiles.active=integration --info --console=plain | tee tests.log
      - store_test_results:
          path: build/test-results/
      - store_artifacts:
          path: build/libs/
      - store_artifacts:
          path: tests.log
      - save_cache:
          key: circle-realitycheck-gradle-cache-{{ checksum "./build.gradle" }}
          paths:
            - "~/.gradle"
      - persist_to_workspace:
          root: .
          paths:
            - '*'


workflows:
  version: 2
  resource_class_jobs:
    jobs:
      - small
      - medium
      - medium+
      - large
      - xlarge

  vm_jobs:
    jobs:
      - machine
      - remote_docker
      - docker_layer_caching
      - machine_dlc

  feature_jobs:
    jobs:
      - save_and_restore_cache
      - contexts:
          context: org-global
      - multi-contexts:
          context: individual-local
      - write_workspace
      - read_workspace:
          requires:
            - write_workspace
      - artifacts_test_results

  transferwise_jobs:
    jobs:
      - docker_tw_ee_liveness
      - long_nothing
      - java

  resource_class_jobs_schedule:
    triggers:
      - schedule:
          cron: "0 0,1,9,12,15,18,21 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - small
      - medium
      - medium+
      - large
      - xlarge

  vm_jobs_schedule:
    triggers:
      - schedule:
          cron: "0 0,1,9,12,15,18,21 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - machine
      - remote_docker
      - docker_layer_caching
      - machine_dlc

  feature_jobs_schedule:
    triggers:
      - schedule:
          cron: "0 0,1,9,12,15,18,21 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - save_and_restore_cache
      - contexts:
          context: org-global
      - multi-contexts:
          context: individual-local
      - write_workspace
      - read_workspace:
          requires:
            - write_workspace
      - artifacts_test_results

  transferwise_jobs_schedule:
    triggers:
      - schedule:
          cron: "0 0,1,9,12,15,18,21 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - docker_tw_ee_liveness
